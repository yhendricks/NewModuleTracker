# Generated by Django 5.2.7 on 2025-10-30 09:29

from django.db import migrations
from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType


def create_batch_management_group(apps, schema_editor):
    """Create the mng_batches group and assign permissions"""
    # Get the Group and Permission models as they exist at the time of this migration
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    Batch = apps.get_model('batch_app', 'Batch')
    Pcb = apps.get_model('batch_app', 'Pcb')

    # Get the content type for Batch model
    try:
        batch_content_type = ContentType.objects.get(app_label='batch_app', model='batch')
    except ContentType.DoesNotExist:
        # If ContentType doesn't exist yet, try to get it by looking for the model
        batch_content_type = ContentType.objects.get_for_model(Batch)

    # Get the content type for Pcb model
    try:
        pcb_content_type = ContentType.objects.get(app_label='batch_app', model='pcb')
    except ContentType.DoesNotExist:
        # If ContentType doesn't exist yet, try to get it by looking for the model
        pcb_content_type = ContentType.objects.get_for_model(Pcb)

    # Create the group
    batch_group, created = Group.objects.get_or_create(name='mng_batches')

    # Get all permissions for the Batch model
    batch_permissions = Permission.objects.filter(content_type=batch_content_type)

    # Get all permissions for the Pcb model
    pcb_permissions = Permission.objects.filter(content_type=pcb_content_type)

    # Add all permissions to the group
    for perm in batch_permissions:
        batch_group.permissions.add(perm)

    for perm in pcb_permissions:
        batch_group.permissions.add(perm)

    batch_group.save()


def remove_batch_management_group(apps, schema_editor):
    """Remove the mng_batches group"""
    Group = apps.get_model('auth', 'Group')
    batch_group = Group.objects.filter(name='mng_batches')
    if batch_group.exists():
        batch_group.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('batch_app', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_batch_management_group, remove_batch_management_group),
    ]
